using System.Text;
using ERokytne.Application.Helpers;
using ERokytne.Domain.Entities;
using ERokytne.Domain.Enums;
using ERokytne.Persistence;
using MediatR;
using Microsoft.EntityFrameworkCore;
using Telegram.Bot;
using Telegram.Bot.Types.Enums;

namespace ERokytne.Application.Telegram.Commands.Registrations;

public class SharedPhoneCommand : IRequest
{
    public long ChatId { get; set; }
    
    public string? Phone { get; set; }
    
    public string? NickName { get; set; }
    
    public string? FullName { get; set; }
}

public class SharedPhoneCommandHandler : IRequestHandler<SharedPhoneCommand>
{
    private readonly ITelegramBotClient _bot;
    private readonly ApplicationDbContext _dbContext;

    public SharedPhoneCommandHandler(ITelegramBotClient bot, ApplicationDbContext dbContext)
    {
        _bot = bot;
        _dbContext = dbContext;
    }

    public async Task<Unit> Handle(SharedPhoneCommand request, CancellationToken cancellationToken)
    {
        var user = await _dbContext.TelegramUsers
            .FirstOrDefaultAsync(e => e.PhoneNumber == request.Phone && !e.IsRemoved,
            cancellationToken);

        if (user is null)
        {
            user = new TelegramUser
            {
                PhoneNumber = request.Phone,
                ChatId = request.ChatId.ToString(),
                IsRemoved = false,
                NickName = request.NickName,
                FullName = request.FullName,
                Type = TelegramUserType.User
            };

            await _dbContext.TelegramUsers.AddAsync(user, cancellationToken);
            await _dbContext.SaveChangesAsync(cancellationToken);
            
            await _bot.SendTextMessageAsync(request.ChatId, GetMessage(),
                replyMarkup: UserCommandHelper.GetStartMenu(), parseMode: ParseMode.Html, 
                cancellationToken: cancellationToken);
            
            return Unit.Value;
        }
        
        await _bot.SendTextMessageAsync(request.ChatId, "–í–∏ —É–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ"
            ,replyMarkup: UserCommandHelper.GetStartMenu(), cancellationToken: cancellationToken);

        return Unit.Value;
    }
    
    private static string GetMessage()
    {
        var message = new StringBuilder();

        message.Append("‚ö°Ô∏è–¶–µ–π –±–æ—Ç —Å—Ç–≤–æ—Ä–µ–Ω–∏–π –¥–ª—è —Ç–æ–≥–æ, —â–æ–± –ª—é–¥–∏ –º–æ–≥–ª–∏ —à–≤–∏–¥–∫–æ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –ø–æ—Ç—Ä—ñ–±–Ω—É —ó–º —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é.\n" +
                       "–í—ñ–Ω –º–∞—î 3 —Ä–æ–∑–¥—ñ–ª–∏:\n");
        message.Append(" \n");
        message.Append(
            "üìë –û–≥–æ–ª–æ—à–µ–Ω–Ω—è:\n- –¢—É—Ç –≤–∏ –º–æ–∂–µ—Ç–µ –ø–æ–¥–∞—Ç–∏ —Å–≤–æ—î –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –Ω–∞ –≤–∞—à—É —Ç–µ–º—É.\n" +
            "–ô–æ–≥–æ –±—É–¥—É—Ç—å –±–∞—á–∏—Ç–∏ –≤—Å—ñ —É—á–∞—Å–Ω–∏–∫–∏ –∫–∞–Ω–∞–ª—É.\n–Ø–∫ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è? –î—É–∂–µ –ø—Ä–æ—Å—Ç–æ!\n");
        message.Append(" \n");
        message.Append("<b>–°—Ç–≤–æ—Ä–∏—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è -> –í–≤–æ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —ñ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î—Ç–µ –π–æ–≥–æ -> " +
                       "–ü–æ –±–∞–∂–∞–Ω–Ω—é –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î—Ç–µ —Ñ–æ—Ç–æ ( –±—É–¥—å-—è–∫–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å) -> –û–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏</b> ‚úÖ\n");
        message.Append(" \n");
        message.Append("üíª –ú–æ—ó –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è:\n");
        message.Append("- –¢—É—Ç –≤–∏ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–≥–ª—è–¥–∞—Ç–∏ —Ç–∞ –≤–∏–¥–∞–ª—è—Ç–∏ —Å–≤–æ—ó –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è.\n–Ø–∫ –≤–∏–¥–∞–ª–∏—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è?\n");
        message.Append(" \n");
        message.Append("<b>–ú–æ—ó –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è -> –û–±–∏—Ä–∞—î—Ç–µ –≤–∞—à–µ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è -> –í–∏–¥–∞–ª–∏—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è</b> ‚úÖ\n");
        message.Append(" \n");
        message.Append("üôå –ü—ñ–¥—Ç—Ä–∏–º–∫–∞\n");
        message.Append("- –¢—É—Ç –≤–∏ –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç–∏ —Å–≤–æ—î –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –∞–±–æ –∑–∞–ø—Ä–æ–ø–æ–Ω—É–≤–∞—Ç–∏ —ñ–¥–µ—é, —è–∫ –ø–æ–∫—Ä–∞—â–∏—Ç–∏ –±–æ—Ç–∞. " +
                       "–Ø–∫—â–æ —ñ–¥–µ—è –±—É–¥–µ –¥—ñ–π—Å–Ω–æ –∫—Ä—É—Ç–∞, —Ç–æ –æ—Ç—Ä–∏–º–∞—î—Ç–µ –≤—ñ–¥ –Ω–∞—Å –±–æ–Ω—É—Å!\n–Ø–∫ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –ø—ñ–¥—Ç—Ä–∏–º–∫—É?");
        message.Append(" \n");
        message.Append("<b>–ü—ñ–¥—Ç—Ä–∏–º–∫–∞ -> –í–≤–æ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î—Ç–µ -> –ì–æ—Ç–æ–≤–æ</b> ‚úÖ\n");
        message.Append(" \n");
        message.Append("–ë–∞–∂–∞—î–º–æ –≤–∞–º –ø—Ä–∏—î–º–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞–Ω–Ω—è! –í–∞—à —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª –Ω–∏–∂—á–µ üëá");

        return message.ToString();
    }
}