using ERokytne.Application.Cache;
using ERokytne.Application.Telegram.Models;
using ERokytne.Domain.Constants;
using ERokytne.Domain.Entities;
using ERokytne.Domain.Enums;
using ERokytne.Persistence;
using MediatR;
using Microsoft.EntityFrameworkCore;
using Telegram.Bot;
using Telegram.Bot.Types.ReplyMarkups;

namespace ERokytne.Application.Telegram.Commands.Announcements;

public class CreateAnnouncement : IRequest
{
    public string? ChatId { get; set; }
}

public class CreateAnnouncementHandler : IRequestHandler<CreateAnnouncement>
{
    private readonly ApplicationDbContext _dbContext;
    private readonly UserActionService _actionService;
    private readonly ITelegramBotClient _client;

    public CreateAnnouncementHandler(ApplicationDbContext dbContext, UserActionService actionService, ITelegramBotClient client)
    {
        _dbContext = dbContext;
        _actionService = actionService;
        _client = client;
    }

    public async Task<Unit> Handle(CreateAnnouncement request, CancellationToken cancellationToken)
    {
        var user = await _dbContext.TelegramUsers.Include(e => e.Announcements)
            .FirstOrDefaultAsync(e => e.ChatId == request.ChatId && !e.IsRemoved, cancellationToken)
                   ?? throw new ArgumentNullException($"User with chat id {request.ChatId} is not found or blocked");

        if (user.Announcements.Count(e => e.CreatedOn.Date == DateTime.UtcNow.Date && !e.IsRemoved) >= 3 && 
            user.Type == TelegramUserType.User)
        {
            await _client.SendTextMessageAsync(request.ChatId!,
                "–í–∏ –≤–∏—Ç—Ä–∞—Ç–∏–ª–∏ –ª—ñ–º—ñ—Ç –æ–≥–æ–ª–æ—à–µ–Ω—å –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ üòø. " +
                "–ú–æ–∂–µ—Ç–µ –ø–æ—á–µ–∫–∞—Ç–∏ –¥–æ –∑–∞–≤—Ç—Ä–∞ –∞–±–æ –≤–∏–¥–∞–ª–∏—Ç–∏ –æ–¥–Ω–µ –∑ –≤–∞—à–∏—Ö –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ—Ö –æ–≥–æ–ª–æ—à–µ–Ω—å, —è–∫–µ –±—É–ª–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ —Å—å–æ–≥–æ–¥–Ω—ñ ‚òùÔ∏è",
                cancellationToken: cancellationToken);
            
            return Unit.Value;
        }

        if (string.IsNullOrWhiteSpace(user.NickName) || user.NickName.Equals("@"))
        {
            await _client.SendTextMessageAsync(request.ChatId!, 
                "–®–∞–Ω–æ–≤–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á, –º–∏ –±–∞—á–∏–º–æ, —â–æ —É –≤–∞—Å –Ω–µ–º–∞—î –Ω—ñ–∫–Ω–µ–π–º—É —É –≤–∞—à–æ–º—É –æ–±–ª—ñ–∫–æ–≤–æ–º—É –∑–∞–ø–∏—Å—ñ —Ç–µ–ª–µ–≥—Ä–∞–º–∞. –ü—Ä–æ—Å–∏–º–æ –π–æ–≥–æ –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏, –¥–ª—è —Ç–æ–≥–æ," +
                " —â–æ–± —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫—É–≤–∞—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è —ñ –Ω—ñ—Ö—Ç–æ –Ω–µ –ø–æ–±–∞—á–∏–≤ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É ‚ö°Ô∏è." +
                    " –¶–µ –º–æ–∂–Ω–∞ –∑—Ä–æ–±–∏—Ç–∏ —É –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è—Ö –≤–∞—à–æ–≥–æ –ø—Ä–æ—Ñ—ñ–ª—é ‚öôÔ∏è." +
                    " –ú–∏ –¥–±–∞—î–º–æ –ø—Ä–æ –≤–∞—à—É –±–µ–∑–ø–µ–∫—É üíª", cancellationToken: cancellationToken);
            return Unit.Value;
        }
        
        var announcement = new Announcement
        {
            TelegramUserId = user.Id,
            IsRemoved = false
        };

        await _dbContext.Announcements.AddAsync(announcement, cancellationToken);
        await _dbContext.SaveChangesAsync(cancellationToken);
        
        await _actionService.SetUserCacheAsync($"{BotConstants.Cache.PreviousCommand}:{request.ChatId}",
            new AnnouncementCacheModel
            {
                PreviousCommand = BotConstants.Commands.SellCommand,
                Id = announcement.Id
            });
        
        var menu = new ReplyKeyboardMarkup(new List<KeyboardButton>
        {
            new(BotConstants.Commands.CancelAnnouncement)
        })
        {
            ResizeKeyboard = true
        };

        await _client.SendTextMessageAsync(request.ChatId!,"–í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç, —è–∫–∏–π –±—É–¥–µ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–∏–π —É –≤–∞—à–æ–º—É –æ–≥–æ–ª–æ—à–µ–Ω–Ω—ñ üí¨",
            replyMarkup: menu, cancellationToken: cancellationToken);
        
        return Unit.Value;
    }
}